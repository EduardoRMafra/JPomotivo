/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package view;

import controller.ScheduleController;
import java.awt.event.ItemEvent;
import javax.swing.JOptionPane;
import model.Schedule;

/**
 *
 * @author Eduardo
 */
public class ScheduleUpdateDialogScreen extends javax.swing.JDialog {

    /**
     * Creates new form ScheduleDialogScreen
     */
    private ScheduleController scheduleController;
    private Schedule schedule;
    
    public ScheduleUpdateDialogScreen(java.awt.Frame parent, boolean modal, Schedule schedule) {
        super(parent, modal);
        initComponents();
        scheduleController = new ScheduleController();
        setSchedule(schedule);
        
        initScheduleInfo();
        verCheckBox();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelHeader = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jPanelContent = new javax.swing.JPanel();
        jTextFieldName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaDescription = new javax.swing.JTextArea();
        jPanelTimeWorking = new javax.swing.JPanel();
        jCheckBoxTimeWorking = new javax.swing.JCheckBox();
        jTextFieldTimeWorking = new javax.swing.JTextField();
        jPanelTimeBreak = new javax.swing.JPanel();
        jCheckBoxBreak = new javax.swing.JCheckBox();
        jTextFieldShortBreak = new javax.swing.JTextField();
        jTextFieldBigBreak = new javax.swing.JTextField();
        jButtonOk = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanelHeader.setBackground(new java.awt.Color(0, 0, 0));
        jPanelHeader.setPreferredSize(new java.awt.Dimension(400, 64));

        jLabelTitle.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabelTitle.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("Atualizar cronograma");

        javax.swing.GroupLayout jPanelHeaderLayout = new javax.swing.GroupLayout(jPanelHeader);
        jPanelHeader.setLayout(jPanelHeaderLayout);
        jPanelHeaderLayout.setHorizontalGroup(
            jPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
        );
        jPanelHeaderLayout.setVerticalGroup(
            jPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
        );

        jPanelContent.setBackground(new java.awt.Color(255, 255, 255));

        jTextFieldName.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldName.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jTextFieldName.setForeground(new java.awt.Color(0, 0, 0));
        jTextFieldName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nome", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        jTextFieldName.setPreferredSize(new java.awt.Dimension(76, 40));

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Descrição", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        jScrollPane2.setForeground(new java.awt.Color(0, 0, 0));
        jScrollPane2.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N

        jTextAreaDescription.setBackground(new java.awt.Color(255, 255, 255));
        jTextAreaDescription.setColumns(20);
        jTextAreaDescription.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jTextAreaDescription.setForeground(new java.awt.Color(0, 0, 0));
        jTextAreaDescription.setRows(5);
        jScrollPane2.setViewportView(jTextAreaDescription);

        jPanelTimeWorking.setBackground(new java.awt.Color(255, 255, 255));
        jPanelTimeWorking.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tempo trabalhando", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanelTimeWorking.setPreferredSize(new java.awt.Dimension(190, 127));

        jCheckBoxTimeWorking.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBoxTimeWorking.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jCheckBoxTimeWorking.setForeground(new java.awt.Color(0, 0, 0));
        jCheckBoxTimeWorking.setSelected(true);
        jCheckBoxTimeWorking.setText("Usar tempo padrão");
        jCheckBoxTimeWorking.setBorder(null);
        jCheckBoxTimeWorking.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jTextFieldTimeWorking.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldTimeWorking.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jTextFieldTimeWorking.setForeground(new java.awt.Color(0, 0, 0));
        jTextFieldTimeWorking.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldTimeWorking.setText("25");
        jTextFieldTimeWorking.setEnabled(false);
        jTextFieldTimeWorking.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldTimeWorkingKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelTimeWorkingLayout = new javax.swing.GroupLayout(jPanelTimeWorking);
        jPanelTimeWorking.setLayout(jPanelTimeWorkingLayout);
        jPanelTimeWorkingLayout.setHorizontalGroup(
            jPanelTimeWorkingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTimeWorkingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTimeWorkingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxTimeWorking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldTimeWorking))
                .addContainerGap())
        );
        jPanelTimeWorkingLayout.setVerticalGroup(
            jPanelTimeWorkingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTimeWorkingLayout.createSequentialGroup()
                .addComponent(jCheckBoxTimeWorking, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldTimeWorking)
                .addContainerGap())
        );

        jPanelTimeBreak.setBackground(new java.awt.Color(255, 255, 255));
        jPanelTimeBreak.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tempo intervalo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanelTimeBreak.setPreferredSize(new java.awt.Dimension(190, 127));

        jCheckBoxBreak.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBoxBreak.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jCheckBoxBreak.setForeground(new java.awt.Color(0, 0, 0));
        jCheckBoxBreak.setSelected(true);
        jCheckBoxBreak.setText("Usar tempo padrão");
        jCheckBoxBreak.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jTextFieldShortBreak.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldShortBreak.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jTextFieldShortBreak.setForeground(new java.awt.Color(0, 0, 0));
        jTextFieldShortBreak.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldShortBreak.setText("5");
        jTextFieldShortBreak.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pequeno", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        jTextFieldShortBreak.setEnabled(false);
        jTextFieldShortBreak.setPreferredSize(new java.awt.Dimension(20, 46));
        jTextFieldShortBreak.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldShortBreakKeyTyped(evt);
            }
        });

        jTextFieldBigBreak.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldBigBreak.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jTextFieldBigBreak.setForeground(new java.awt.Color(0, 0, 0));
        jTextFieldBigBreak.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldBigBreak.setText("25");
        jTextFieldBigBreak.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grande", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        jTextFieldBigBreak.setEnabled(false);
        jTextFieldBigBreak.setPreferredSize(new java.awt.Dimension(20, 46));
        jTextFieldBigBreak.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldBigBreakKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelTimeBreakLayout = new javax.swing.GroupLayout(jPanelTimeBreak);
        jPanelTimeBreak.setLayout(jPanelTimeBreakLayout);
        jPanelTimeBreakLayout.setHorizontalGroup(
            jPanelTimeBreakLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTimeBreakLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTimeBreakLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxBreak, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelTimeBreakLayout.createSequentialGroup()
                        .addComponent(jTextFieldShortBreak, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(16, 16, 16)
                        .addComponent(jTextFieldBigBreak, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelTimeBreakLayout.setVerticalGroup(
            jPanelTimeBreakLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTimeBreakLayout.createSequentialGroup()
                .addComponent(jCheckBoxBreak, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTimeBreakLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldShortBreak, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldBigBreak, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jButtonOk.setBackground(new java.awt.Color(0, 0, 0));
        jButtonOk.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jButtonOk.setForeground(new java.awt.Color(255, 255, 255));
        jButtonOk.setText("Ok");
        jButtonOk.setBorderPainted(false);
        jButtonOk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonOkMouseClicked(evt);
            }
        });

        jButtonCancel.setBackground(new java.awt.Color(153, 153, 153));
        jButtonCancel.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jButtonCancel.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCancel.setText("Cancelar");
        jButtonCancel.setBorderPainted(false);
        jButtonCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCancelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelContentLayout = new javax.swing.GroupLayout(jPanelContent);
        jPanelContent.setLayout(jPanelContentLayout);
        jPanelContentLayout.setHorizontalGroup(
            jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addGroup(jPanelContentLayout.createSequentialGroup()
                        .addComponent(jPanelTimeWorking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(28, 28, 28)
                        .addComponent(jPanelTimeBreak, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelContentLayout.createSequentialGroup()
                        .addComponent(jButtonOk, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelContentLayout.setVerticalGroup(
            jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelTimeWorking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelTimeBreak, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOk, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
            .addComponent(jPanelContent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCancelMouseClicked
        // fecha a janela de atualização de cronogramas
        this.dispose();
    }//GEN-LAST:event_jButtonCancelMouseClicked

    private void jButtonOkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOkMouseClicked
        // tenta atualizar um cronograma
        try{
            //verifica se o nome do cronograma não está vazio
            if(!jTextFieldName.getText().isBlank()&& !jTextFieldTimeWorking.getText().isBlank() 
                    && !jTextFieldShortBreak.getText().isBlank() 
                    && !jTextFieldBigBreak.getText().isBlank()){
                Schedule s = new Schedule();
                s.setId(schedule.getId());
                s.setIdUser(schedule.getIdUser());
                s.setName(jTextFieldName.getText());
                s.setDescription(jTextAreaDescription.getText());
                s.setUpdatedAt(schedule.getUpdatedAt());
                
                //pega o valor dos intervalos
                s.setTimeWorking(Integer.parseInt(jTextFieldTimeWorking.getText()));
                s.setShortBreak(Integer.parseInt(jTextFieldShortBreak.getText()));
                s.setBigBreak(Integer.parseInt(jTextFieldBigBreak.getText()));
                //atualizar o cronograma
                scheduleController.update(s);

                JOptionPane.showMessageDialog(rootPane, "Cronograma atualizado com sucesso");
                this.dispose();
            }else{
                JOptionPane.showMessageDialog(rootPane, "O cronograma não foi atualizado, "
                        + "pois existem campos obrigatórios a serem preenchidos");
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }//GEN-LAST:event_jButtonOkMouseClicked

    private void jTextFieldTimeWorkingKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTimeWorkingKeyTyped
        onlyNumbers(evt);
    }//GEN-LAST:event_jTextFieldTimeWorkingKeyTyped

    private void jTextFieldShortBreakKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldShortBreakKeyTyped
        onlyNumbers(evt);
    }//GEN-LAST:event_jTextFieldShortBreakKeyTyped

    private void jTextFieldBigBreakKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBigBreakKeyTyped
        onlyNumbers(evt);
    }//GEN-LAST:event_jTextFieldBigBreakKeyTyped
    //Apenas aceita números
    private void onlyNumbers(java.awt.event.KeyEvent evt){
        char c = evt.getKeyChar();
        
        if(!Character.isDigit(c)){
            evt.consume();
        }        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JCheckBox jCheckBoxBreak;
    private javax.swing.JCheckBox jCheckBoxTimeWorking;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanelContent;
    private javax.swing.JPanel jPanelHeader;
    private javax.swing.JPanel jPanelTimeBreak;
    private javax.swing.JPanel jPanelTimeWorking;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaDescription;
    private javax.swing.JTextField jTextFieldBigBreak;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldShortBreak;
    private javax.swing.JTextField jTextFieldTimeWorking;
    // End of variables declaration//GEN-END:variables
    
    public void setSchedule(Schedule schedule) {
        this.schedule = schedule;
    }
    //habilita e desabilita as caixas de texto com base nas checkboxs
    public void verCheckBox(){
        //tempo de trabalho
        jCheckBoxTimeWorking.addItemListener((ItemEvent e) -> {
            if(e.getStateChange() == ItemEvent.SELECTED) {//selecionado
                jTextFieldTimeWorking.setEnabled(false);
                jTextFieldTimeWorking.setText("25");
            } else {//não selecionado
                jTextFieldTimeWorking.setEnabled(true);
            }
        });
        //tempo de intervalo
        jCheckBoxBreak.addItemListener((ItemEvent e) -> {
            if(e.getStateChange() == ItemEvent.SELECTED) {//selecionado
                jTextFieldShortBreak.setEnabled(false);
                jTextFieldBigBreak.setEnabled(false);
                jTextFieldShortBreak.setText("5");
                jTextFieldBigBreak.setText("25");
            } else {//não selecionado
                jTextFieldShortBreak.setEnabled(true);
                jTextFieldBigBreak.setEnabled(true);
            }
        });
    }
    public void initScheduleInfo(){
        jTextFieldName.setText(schedule.getName());
        jTextAreaDescription.setText(schedule.getDescription());
        jTextFieldTimeWorking.setText(String.valueOf(schedule.getTimeWorking()));
        jTextFieldShortBreak.setText(String.valueOf(schedule.getShortBreak()));
        jTextFieldBigBreak.setText(String.valueOf(schedule.getBigBreak()));
        if(schedule.getTimeWorking() != 25){
            jCheckBoxTimeWorking.setSelected(false);
            jTextFieldTimeWorking.setEnabled(true);
        }
        if(schedule.getShortBreak() != 5 || schedule.getBigBreak()!= 25){
            jCheckBoxBreak.setSelected(false);
            jTextFieldShortBreak.setEnabled(true);
            jTextFieldBigBreak.setEnabled(true);
        }
    }
}
